import { formatPercent } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';
import { Recipe } from '../recipe.model';
import { RecipeService } from '../recipe.service';

@Component({
  selector: 'app-recipe-edit',
  templateUrl: './recipe-edit.component.html',
  styleUrls: ['./recipe-edit.component.css'],
})
export class RecipeEditComponent implements OnInit {
  id: number;
  editMode = false; //to check if we are adding new recipe or editing an existing one (see .subscribe conditions)
  recipeForm: FormGroup;

  constructor(
    private route: ActivatedRoute,
    private recipeService: RecipeService
  ) {}

  ngOnInit(): void {
    this.route.params.subscribe((params: Params) => {
      this.id = +params['id']; //id is returned as a string so you need to convert it to a anumber
      this.editMode = params['id'] != null; //check if params has an id property, if it has, there is value if not it will be null, check returns true or false
      console.log('is edit mode ? ' + this.editMode);
      this.initForm();
      // ----- remember to synch it with the HTML you need ReactiveFormsModule in the app.module.ts
    });
  }

  private initForm() {
    // ----- the form shoulld be called whenever our route parameters change !!! -------//
    let recipeName = '';
    let recipeImagePath = '';
    let recipeDescription = '';
    let recipeIngredients = new FormArray([]); // is initialised with a default of an empty array because we do not have any ingredients at the beginning

    if (this.editMode) {
      // you can only ask for recipe id if we are in the edit mode
      const recipe = this.recipeService.getRecipe(this.id);
      recipeName = recipe.name;
      recipeImagePath = recipe.imagePath;
      recipeDescription = recipe.description;
      if (recipe['ingredients']) {
        for (let ingredient of recipe.ingredients) {
          recipeIngredients.push(
            new FormGroup({
              'name-a': new FormControl(ingredient.name, Validators.required),
              'amount-a': new FormControl(ingredient.amount, [
                Validators.required,
                Validators.pattern(/^[1-9]+[0-9]*$/),
              ]),
              'unit-a': new FormControl(ingredient.unit, Validators.required),
            })
          );
        }
      }
    }
    this.recipeForm = new FormGroup({
      //key value pairs that we do want to register
      'name-from-form': new FormControl(recipeName, Validators.required), // it is important to decide if we are in editMode or not
      'imagePath-from-form': new FormControl(
        recipeImagePath,
        Validators.required
      ),
      'description-from-form': new FormControl(
        recipeDescription,
        Validators.required
      ),
      'ingredients': recipeIngredients,
    });
  }

  onAddIngredient() {
    (<FormArray>this.recipeForm.get('ingredients')).push(
      new FormGroup({
    // they are generated by  *ngFor="let ingredientCtrl of getControls(); let i = index" but empty so formControlName has to be name-a as well 
        'name-a': new FormControl(null, Validators.required),
        'amount-a': new FormControl(null,  [
          Validators.required,
          Validators.pattern(/^[1-9]+[0-9]*$/),]),
        'unit-a': new FormControl(null, Validators.required),
      })
    );

    console.log(this.recipeForm);
  }

  onSubmit() {
    console.log(this.recipeForm);
    const newRecipe = new Recipe(
      this.recipeForm.value['name-from-form'],
      this.recipeForm.value['description-from-form'],
      this.recipeForm.value['imagePath-from-form'], 
      this.recipeForm.value['ingredients']
       );
    if (this.editMode){
      this.recipeService.updateRecipe(this.id, newRecipe)
      // this.recipeService.updateRecipe(this.id, this.recipeForm.value)
    } else {
      this.recipeService.addRecipe(newRecipe)
      // this.recipeService.addRecipe(this.recipeForm.value)
    }
     //to get live update of new recipe added you need to add onChange in recipeService.ts
  }

  getControls() {
    // a getter!
    return (<FormArray>this.recipeForm.get('ingredients')).controls;
  }
}
